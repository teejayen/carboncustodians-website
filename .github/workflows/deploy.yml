name: Build and Deploy Jekyll Site

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
      
      - name: Install dependencies & build site
        run: |
          bundle install
          bundle exec jekyll build
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Deploy to S3
        run: |
          # First, upload all files with their detected mime types
          aws s3 sync _site/ s3://${{ secrets.S3_BUCKET }}/ --delete
          
          # Set correct mime type for common web files to ensure they're correct
          find _site -name "*.html" -type f -exec aws s3 cp {} s3://${{ secrets.S3_BUCKET }}/{} --content-type "text/html" --metadata-directive REPLACE \;
          find _site -name "*.css" -type f -exec aws s3 cp {} s3://${{ secrets.S3_BUCKET }}/{} --content-type "text/css" --metadata-directive REPLACE \;
          find _site -name "*.js" -type f -exec aws s3 cp {} s3://${{ secrets.S3_BUCKET }}/{} --content-type "application/javascript" --metadata-directive REPLACE \;
          find _site -name "*.json" -type f -exec aws s3 cp {} s3://${{ secrets.S3_BUCKET }}/{} --content-type "application/json" --metadata-directive REPLACE \;
          find _site -name "*.xml" -type f -exec aws s3 cp {} s3://${{ secrets.S3_BUCKET }}/{} --content-type "application/xml" --metadata-directive REPLACE \;
          
          # Handle extensionless files - crucial for clean URLs
          # Find all files without extensions and set them as text/html
          find _site -type f -not -path "*/\.*" | grep -v "\." | xargs -I{} aws s3 cp {} s3://${{ secrets.S3_BUCKET }}/{} --content-type "text/html" --metadata-directive REPLACE
          
          # Handle files that should be text/html but don't match the above
          for file in $(find _site -path "*/*" -type f -not -path "*/\.*" -not -name "*.html" -not -name "*.css" -not -name "*.js" -not -name "*.json" -not -name "*.xml" -not -name "*.jpg" -not -name "*.jpeg" -not -name "*.png" -not -name "*.gif" -not -name "*.svg" -not -name "*.ico" -not -name "*.ttf" -not -name "*.woff" -not -name "*.woff2" -not -name "*.eot"); do
            if [[ $(file --mime-type -b "$file") == text/* ]]; then
              aws s3 cp "$file" s3://${{ secrets.S3_BUCKET }}/"${file#_site/}" --content-type "text/html" --metadata-directive REPLACE
            fi
          done
      
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"